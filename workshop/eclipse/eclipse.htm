<!doctype html public "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="en-US" >
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <title>Eclipse Guided Tour</title>
    <meta name="CHANGEDBY" content="Pr. Olivier Gruber">
    <link rel="stylesheet" href="/style.css" type="text/css" /> 
    <link rel="stylesheet" href="/prettify.css" type="text/css" rel="stylesheet" />
    <script src="/prettify.js" type="text/javascript"></script>
  </head>
  <body lang="en-US" onload="prettyPrint()">
    <script src="/progress.js"></script> 
    <script src="eclipse.js"></script> 
    
    <div id="outer-container" >
      <div id="header" >
	      <div id="logo" >
	        <img src="/logo_uga.png" height="100" border="0" alt="Polytech" />
	        <img src="/logo_reseau_polytech.gif" height="80" border="0" alt="Polytech" />
	      </div>
	      <div id="top-links">
	        <a href="/">Home</a> 
	        <a href="/about">About</a> 
	        <a href="/contact">Contact</a>
	      </div>
      </div>
      <div id="inner-container" >

	      <h1>Eclipse Guided Tour </h1>

        <!--
	          <h2>Installation</h2>
            
	          Go check this <a href="install.htm">tutorial</a> to check how to start
	          on the right foot.
            -->
            
	          <h2>Workbench</h2>

	      <p>
	        What you need to know to get started with the Eclipse human interface.
	        Checkout our guide to the Eclipse
	        <a href="workbench.htm">Workbench</a>.
	      </p>
	      
	      <h2>Workspace</h2>

	      <p>
	        What you need to know to get started with your first Eclipse workspace.
	        Checkout our guide to Eclipse
	        <a href="workspace.htm">Workspace</a>.
	      </p>	

	      <h2>Java Project</h2>

	      <p>
	        What you need to know to get started with your first Java project
	        in Eclipse. Checkout our guide to Eclipse
	        <a href="java-project.htm">Java projects</a>.
	      </p>	

        
	      <h2>Eclipse Preferences</h2>

	      <h3>Sharing Preferences</h3>

	      <p>
	        Eclipse uses a set of preferences that you can tweak using the
	        Workbench GUI: Windows -> Preferences. We encourage you to do it,
	        the environment can be tailored to your taste quite a bit.
	      </p>
	      <p>
	        The preferences are stored under the directory
	        <em>".metadata/.plugins/org.eclipse.core.runtime/.settings"</em>
	        in your workspace directory. This means that you can copy your
	        preferences from one workspace to another, without having
	        to go through the GUI hassle all over again. 
	      </p>
	      <p>
	        In a team setting, things are a bit different. There are some
	        preferences that you can tweak, others that you must never tweak.
	        To help you with that, Eclipse can export the key Java preferences.
	        Using the Eclipse menus, go to 
	        File -> Export -> General -> Preferences.
	        You will see that you can export exactly what needs to be shared
	        across team members doing Java developments:
	      </p>
	      <ol>
	        <li>Installed JREs</li>
	        <li>Java Code Style Preferences</li>
	        <li>Java Compiler Preferences</li>
	      </ol>
	      
	      <h3>Java Formatter Setup</h3>

	      <p>
	        Go check this <a href="formatter.htm">tutorial</a> to check how to learn
	        what is the Java formatter and how to configure it.
	      </p>

  	    <h2>Eclipse Most-useful Shortcuts</h2>

        <p>
          The following shortcuts are the most-useful ones, the ones that any serious developer cannot
          do without.
        </p>
        <p>
          <b>Nota Bene</b>: any shortcut can be redefined in Eclipse. For instance, for those that have a Mac-like
          LCD-based bar for Function keys, you may want to redefine certain shortcuts,
          for example F5 &rarr; Alt-5. Go to the menu "Windows" &rarr; "Preferences" &rarr; "General" &rarr; "Keys".
        </p>
        <ol>
          <li> <b>Writing code</b>
            <ol>
              <li>Ctrl-Shift-Arrow: to select text, you can use the &larr; or &rarr; to select on one line or
                even the &uarr; and &darr; for a multi-line selection. So much faster than using your mouse.</li>
              <li>Ctrl-F: search (and replace)</li>
              <li>Ctrl-space: content assist</li>
              <li>Ctrl-S: save current editor</li>
              <li>Ctrl-Shift-F: pretty-print (reformat your source).</li>
              <li>Ctrl-Shift-O: automatic management of your imported classes/packages.</li>
              <li>Ctrl-B: rebuild all, only necessary if automatic build is off</li>
              <li>Alt-Shift-R:  enables the renaming of the currently selected item (class, method, variable)
                Note: once you typed the new value, you can hit escape or return. Return will trigger a global
                replacement throughout all your classes. Escape will keep the changes to the local file,
                but it is much faster. So for local changes, such as changing a parameter name,
                a local variable name, or a private method name, always hit Escape, it is so much faster.</li>
              <li>Ctrl-Shift-_ will split the current editor in two horizontally.</li>
              <li>Ctrl-Shift-{ will split the current editor in two vertically.</li>
              <li>Dragging an editor tab allows to have multiple editor tabs side-by-side.
            </ol>
          </li>
          <li> <b>Navigating</b>
            <ol>
              <li>Ctrl-O: outline as a popup, quick navigation to Java items in the current source)</li>
              <li>Ctrl-Shift-T:  search for a class (wildcards do work)</li>
              <li>Ctrl-Shift-G:  select something, you will see where it is used
                for example, select a method and you will see all the places it is called from.</li>
              <li>Ctrl-E: select a tab.</li>
              <li>Ctrl-Shift-W: close all opened tabs... cool once you have so many opened that you are lost.</li>

              <li>F3: select a Java item (class, variable, or method) and navigate to it.
                Look for the yellow arrows in the tool bar to have the ability to navigate back from hitting F3.
              </li>
              <li>F4: select a class and see its hierarchy (super-classes) and sub-classes
                this is especially useful when wanting to know which classes implement an interface.</li>
            </ol>
          </li>
          <li> <b>Debugging</b>
            <ol>
	            <li>F5: step in</li>
	            <li>F6: step over</li>
	            <li>F7: step out</li>
	            <li>F8: go</li>
	            <li>F11: relaunch last launch (sometimes a bit tricky because it is contextual).</li>
              <li> The view "Variables" shows the arguments and the local variables. For objects,
                click on their reference and the debugger will invoke the method
                <em>Object:toString()String</em> on the corresponding object.
              <li> Breaking points:
                <ol>
                  <li> Line breakpoint: right-click on a line and toggle the breakpoint there.</li>
                  <li> Conditional breakpoint: you can add a condition on a breakpoint, like
                    breaking in a loop when the index of the loop has a particular value.
                  </li>
                  <li> Exception breakpoint: you can set a breakpoint that will break the execution
                    when a certain exception has been thrown. </li>
                    
                </ol>
              </li>
            </ol>
        </ol>

      </div>
    </div>
  </body>
</html>
